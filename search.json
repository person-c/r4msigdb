[{"path":"https://snowglint.github.io/r4msigdb/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 r4msigdb authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://snowglint.github.io/r4msigdb/articles/introduction.html","id":"r4msigdb","dir":"Articles","previous_headings":"","what":"r4msigdb","title":"introduction","text":"MSigDB widely used gene set database bio-research. However, navigating querying pathways interest website can challenging. R package designed facilitate convenient efficient querying pathways either based specific genes using regular expression patterns match pathway names.","code":""},{"path":"https://snowglint.github.io/r4msigdb/articles/introduction.html","id":"installation","dir":"Articles","previous_headings":"r4msigdb","what":"Installation","title":"introduction","text":"can install development version r4msigdb like :","code":"devtools::install('snowGlint/r4msigdb')"},{"path":[]},{"path":"https://snowglint.github.io/r4msigdb/articles/introduction.html","id":"search-for-pathways-related-to-a-specific-topic","dir":"Articles","previous_headings":"r4msigdb > Querying Pathways","what":"Search for Pathways Related to a Specific Topic","title":"introduction","text":"retrieve pathways related specific topic (e.g., cell programmed death): return list pathways associated OPTOSIS genes involved pathway.","code":"library(r4msigdb) query(species = 'Hs', pathway = 'OPTOSIS') |> head() #> Key: <collection_name, standard_name> #>    collection_name                              standard_name #>             <char>                                     <char> #> 1:          C2:CGP                           ALCALA_APOPTOSIS #> 2:          C2:CGP           BROCKE_APOPTOSIS_REVERSED_BY_IL6 #> 3:          C2:CGP       CONCANNON_APOPTOSIS_BY_EPOXOMICIN_DN #> 4:          C2:CGP       CONCANNON_APOPTOSIS_BY_EPOXOMICIN_UP #> 5:          C2:CGP DEBIASI_APOPTOSIS_BY_REOVIRUS_INFECTION_DN #> 6:          C2:CGP DEBIASI_APOPTOSIS_BY_REOVIRUS_INFECTION_UP #>                                          symbol #>                                          <list> #> 1:         HCCS,MATK,FAS,CYFIP2,ELOVL1,PFKP,... #> 2:      DPM1,RALA,PHTF2,ADIPOR2,CD44,SH2D2A,... #> 3: ICA1,ETV1,TRAPPC6A,DNASE1L1,TMSB10,HDAC9,... #> 4:          TAC1,IFRD1,TSPAN9,GCLM,FAS,CD44,... #> 5:      LASP1,BLTP2,METTL13,CD9,NISCH,BRCA1,... #> 6:           AK2,CDC27,ACSM3,ZFX,TAC1,IFRD1,..."},{"path":"https://snowglint.github.io/r4msigdb/articles/introduction.html","id":"search-for-pathways-related-to-specific-genes","dir":"Articles","previous_headings":"r4msigdb > Querying Pathways","what":"Search for Pathways Related to Specific Genes","title":"introduction","text":"want find pathways related specific genes (e.g., PTPRC TP53): provide pathways specified genes involved.","code":"query(species = 'Hs', symbols = c('PTPRC', 'TP53')) |> head() #> Key: <collection_name, standard_name> #>    collection_name                                   standard_name #>             <char>                                          <char> #> 1:              C1                                        chr17p13 #> 2:              C1                                         chr1q31 #> 3:          C2:CGP             ABRAHAM_ALPC_VS_MULTIPLE_MYELOMA_DN #> 4:          C2:CGP ACOSTA_PROLIFERATION_INDEPENDENT_MYC_TARGETS_DN #> 5:          C2:CGP      BENITEZ_GBM_PROTEASOME_INHIBITION_RESPONSE #> 6:          C2:CGP                       BENPORATH_MYC_MAX_TARGETS #>                                        symbol #>                                        <list> #> 1: CAMKK1,DVL2,DHX33,PAFAH1B1,GAS7,RABEP1,... #> 2:        GLRX2,TPR,PTGS2,RGS2,RO60,UCHL5,... #> 3:      TCF3,XRCC5,PSEN1,CCNB1,IL6ST,CDK4,... #> 4:     LASP1,ACSM3,GDE1,CAPN1,CHPF2,KCNH2,... #> 5:     DVL2,MXD1,ASNS,MLF2,GPATCH2L,FBXO7,... #> 6:        DPM1,GCLC,M6PR,RECQL,GCFC2,PDK2,..."},{"path":"https://snowglint.github.io/r4msigdb/articles/introduction.html","id":"custom-query","dir":"Articles","previous_headings":"r4msigdb > Querying Pathways","what":"Custom Query","title":"introduction","text":"Advanced users familiar data.table can perform custom queries. example, retrieve pathways collection_name == 'H': can also use .unlist = TRUE unlist symbols column query methods.","code":"query(species = 'Hs')[.('H')] |> head() #> Key: <collection_name, standard_name> #>    collection_name                standard_name #>             <char>                       <char> #> 1:               H        HALLMARK_ADIPOGENESIS #> 2:               H HALLMARK_ALLOGRAFT_REJECTION #> 3:               H   HALLMARK_ANDROGEN_RESPONSE #> 4:               H        HALLMARK_ANGIOGENESIS #> 5:               H     HALLMARK_APICAL_JUNCTION #> 6:               H      HALLMARK_APICAL_SURFACE #>                                           symbol #>                                           <list> #> 1:  AK2,NDUFAB1,ADIPOR2,UQCRC1,PHLDB1,RETSAT,... #> 2:            STAB1,BRCA1,WAS,FAS,CAPG,HDAC9,... #> 3:        PGM3,PIAS1,RRP12,APPBP2,GNAI3,IDI1,... #> 4:           NRP1,JAG1,TIMP1,VTN,VEGFA,ITGAV,... #> 5:          CD99,SKAP2,ITGA3,PKD1,CLDN11,VCL,... #> 6: ADIPOR2,BRCA1,DCBLD2,CROCC,IL2RB,ATP6V0A4,... query(species = 'Hs', .unlist = TRUE) |> head() #> Key: <collection_name, standard_name> #>    collection_name standard_name  symbol #>             <char>        <char>  <char> #> 1:              C1            MT  MT-CO2 #> 2:              C1            MT  MT-ND2 #> 3:              C1            MT  MT-CO1 #> 4:              C1            MT  MT-ND3 #> 5:              C1            MT  MT-ND4 #> 6:              C1            MT MT-ATP6"},{"path":"https://snowglint.github.io/r4msigdb/articles/introduction.html","id":"gsea","dir":"Articles","previous_headings":"r4msigdb","what":"GSEA","title":"introduction","text":"","code":"library(fgsea) library(data.table) palette <- c(\"#440154FF\", \"#31688EFF\", \"#26828EFF\", \"#6DCD59FF\", \"#FDE725FF\")  data(exampleRanks) pathway <-  query(species = 'Hs', pathway = 'OPTOSIS', .unlist = TRUE) pathway <- pathway[, .(standard_name, symbol)] # substitute names with random symbols set.seed(2024) names(exampleRanks) <- query(species = 'Hs', .unlist = TRUE)[, sample(unique(symbol), length(exampleRanks))]  gseaR <- clusterProfiler::GSEA(rev(exampleRanks),   TERM2GENE = pathway, pvalueCutoff = 1, by = \"fgsea\", eps = 0 ) sortedgsea <- as.data.table(gseaR@result)[order(pvalue)]  enrichplot::gseaplot2(gseaR, sortedgsea[[\"ID\"]][1:5],   base_size = 10,   color = palette,   rel_heights = c(1.5, 0.3, 0.5),   pvalue_table = FALSE )"},{"path":"https://snowglint.github.io/r4msigdb/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Wei Cui. Author, maintainer.","code":""},{"path":"https://snowglint.github.io/r4msigdb/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cui W (2024). r4msigdb: Package (One Line, Title Case). R package version 0.0.0.9000, https://snowglint.github.io/r4msigdb/.","code":"@Manual{,   title = {r4msigdb: What the Package Does (One Line, Title Case)},   author = {Wei Cui},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://snowglint.github.io/r4msigdb/}, }"},{"path":"https://snowglint.github.io/r4msigdb/index.html","id":"r4msigdb","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"MSigDB widely used gene set database bio-research. However, navigating querying pathways interest website can challenging. R package designed facilitate convenient efficient querying pathways either based specific genes using regular expression patterns match pathway names.","code":""},{"path":"https://snowglint.github.io/r4msigdb/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version r4msigdb like :","code":"devtools::install('snowGlint/r4msigdb')"},{"path":[]},{"path":"https://snowglint.github.io/r4msigdb/index.html","id":"search-for-pathways-related-to-a-specific-topic","dir":"","previous_headings":"Querying Pathways","what":"Search for Pathways Related to a Specific Topic","title":"What the Package Does (One Line, Title Case)","text":"retrieve pathways related specific topic (e.g., cell programmed death): return list pathways associated OPTOSIS genes involved pathway.","code":"library(r4msigdb) query(species = 'Hs', pathway = 'OPTOSIS') |> head() #> Key: <collection_name, standard_name> #>    collection_name                              standard_name #>             <char>                                     <char> #> 1:          C2:CGP                           ALCALA_APOPTOSIS #> 2:          C2:CGP           BROCKE_APOPTOSIS_REVERSED_BY_IL6 #> 3:          C2:CGP       CONCANNON_APOPTOSIS_BY_EPOXOMICIN_DN #> 4:          C2:CGP       CONCANNON_APOPTOSIS_BY_EPOXOMICIN_UP #> 5:          C2:CGP DEBIASI_APOPTOSIS_BY_REOVIRUS_INFECTION_DN #> 6:          C2:CGP DEBIASI_APOPTOSIS_BY_REOVIRUS_INFECTION_UP #>                                          symbol #>                                          <list> #> 1:         HCCS,MATK,FAS,CYFIP2,ELOVL1,PFKP,... #> 2:      DPM1,RALA,PHTF2,ADIPOR2,CD44,SH2D2A,... #> 3: ICA1,ETV1,TRAPPC6A,DNASE1L1,TMSB10,HDAC9,... #> 4:          TAC1,IFRD1,TSPAN9,GCLM,FAS,CD44,... #> 5:      LASP1,BLTP2,METTL13,CD9,NISCH,BRCA1,... #> 6:           AK2,CDC27,ACSM3,ZFX,TAC1,IFRD1,..."},{"path":"https://snowglint.github.io/r4msigdb/index.html","id":"search-for-pathways-related-to-specific-genes","dir":"","previous_headings":"Querying Pathways","what":"Search for Pathways Related to Specific Genes","title":"What the Package Does (One Line, Title Case)","text":"want find pathways related specific genes (e.g., PTPRC TP53): provide pathways specified genes involved.","code":"query(species = 'Hs', symbols = c('PTPRC', 'TP53')) |> head() #> Key: <collection_name, standard_name> #>    collection_name                                   standard_name #>             <char>                                          <char> #> 1:              C1                                        chr17p13 #> 2:              C1                                         chr1q31 #> 3:          C2:CGP             ABRAHAM_ALPC_VS_MULTIPLE_MYELOMA_DN #> 4:          C2:CGP ACOSTA_PROLIFERATION_INDEPENDENT_MYC_TARGETS_DN #> 5:          C2:CGP      BENITEZ_GBM_PROTEASOME_INHIBITION_RESPONSE #> 6:          C2:CGP                       BENPORATH_MYC_MAX_TARGETS #>                                        symbol #>                                        <list> #> 1: CAMKK1,DVL2,DHX33,PAFAH1B1,GAS7,RABEP1,... #> 2:        GLRX2,TPR,PTGS2,RGS2,RO60,UCHL5,... #> 3:      TCF3,XRCC5,PSEN1,CCNB1,IL6ST,CDK4,... #> 4:     LASP1,ACSM3,GDE1,CAPN1,CHPF2,KCNH2,... #> 5:     DVL2,MXD1,ASNS,MLF2,GPATCH2L,FBXO7,... #> 6:        DPM1,GCLC,M6PR,RECQL,GCFC2,PDK2,..."},{"path":"https://snowglint.github.io/r4msigdb/index.html","id":"custom-query","dir":"","previous_headings":"Querying Pathways","what":"Custom Query","title":"What the Package Does (One Line, Title Case)","text":"Advanced users familiar data.table can perform custom queries. example, retrieve pathways collection_name == 'H': can also use .unlist = TRUE unlist symbols column query methods.","code":"query(species = 'Hs')[.('H')] |> head() #> Key: <collection_name, standard_name> #>    collection_name                standard_name #>             <char>                       <char> #> 1:               H        HALLMARK_ADIPOGENESIS #> 2:               H HALLMARK_ALLOGRAFT_REJECTION #> 3:               H   HALLMARK_ANDROGEN_RESPONSE #> 4:               H        HALLMARK_ANGIOGENESIS #> 5:               H     HALLMARK_APICAL_JUNCTION #> 6:               H      HALLMARK_APICAL_SURFACE #>                                           symbol #>                                           <list> #> 1:  AK2,NDUFAB1,ADIPOR2,UQCRC1,PHLDB1,RETSAT,... #> 2:            STAB1,BRCA1,WAS,FAS,CAPG,HDAC9,... #> 3:        PGM3,PIAS1,RRP12,APPBP2,GNAI3,IDI1,... #> 4:           NRP1,JAG1,TIMP1,VTN,VEGFA,ITGAV,... #> 5:          CD99,SKAP2,ITGA3,PKD1,CLDN11,VCL,... #> 6: ADIPOR2,BRCA1,DCBLD2,CROCC,IL2RB,ATP6V0A4,... query(species = 'Hs', .unlist = TRUE) |> head() #> Key: <collection_name, standard_name> #>    collection_name standard_name  symbol #>             <char>        <char>  <char> #> 1:              C1            MT  MT-CO2 #> 2:              C1            MT  MT-ND2 #> 3:              C1            MT  MT-CO1 #> 4:              C1            MT  MT-ND3 #> 5:              C1            MT  MT-ND4 #> 6:              C1            MT MT-ATP6"},{"path":"https://snowglint.github.io/r4msigdb/index.html","id":"gsea","dir":"","previous_headings":"","what":"GSEA","title":"What the Package Does (One Line, Title Case)","text":"","code":"library(fgsea) library(data.table) palette <- c(\"#440154FF\", \"#31688EFF\", \"#26828EFF\", \"#6DCD59FF\", \"#FDE725FF\")  data(exampleRanks) pathway <-  query(species = 'Hs', pathway = 'OPTOSIS', .unlist = TRUE) pathway <- pathway[, .(standard_name, symbol)] # substitute names with random symbols set.seed(2024) names(exampleRanks) <- query(species = 'Hs', .unlist = TRUE)[, sample(unique(symbol), length(exampleRanks))]  gseaR <- clusterProfiler::GSEA(rev(exampleRanks),   TERM2GENE = pathway, pvalueCutoff = 1, by = \"fgsea\", eps = 0 ) sortedgsea <- as.data.table(gseaR@result)[order(pvalue)]  enrichplot::gseaplot2(gseaR, sortedgsea[[\"ID\"]][1:5],   base_size = 10,   color = palette,   rel_heights = c(1.5, 0.3, 0.5),   pvalue_table = FALSE )"},{"path":"https://snowglint.github.io/r4msigdb/reference/query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query for MsigDB. — query","title":"Query for MsigDB. — query","text":"Query MsigDB.","code":""},{"path":"https://snowglint.github.io/r4msigdb/reference/query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query for MsigDB. — query","text":"","code":"query(species = c(\"Hs\", \"Mm\"), pathway = NULL, symbols = NULL, .unlist = FALSE)"},{"path":"https://snowglint.github.io/r4msigdb/reference/query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query for MsigDB. — query","text":"species species(Hs Mm). pathway regex expression match possible pathsways. symbols character vector gene symbols match possible pathsways .unlist whether unlist symbols column.","code":""},{"path":"https://snowglint.github.io/r4msigdb/reference/setnames.html","id":null,"dir":"Reference","previous_headings":"","what":"setnames. — setnames","title":"setnames. — setnames","text":"setnames.","code":""},{"path":"https://snowglint.github.io/r4msigdb/reference/setnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setnames. — setnames","text":"","code":"setnames(x, name)"},{"path":"https://snowglint.github.io/r4msigdb/reference/setnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setnames. — setnames","text":"x data. name x's name.","code":""}]
